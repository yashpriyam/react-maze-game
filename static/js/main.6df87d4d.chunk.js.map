{"version":3,"sources":["Components/saviour.jsx","Components/square.jsx","Components/mazeBoard.jsx","App.js","reportWebVitals.js","index.js"],"names":["Saviour","className","Sprites","SquareBox","showGreen","showRed","liveSprite","MazeBoard","props","mazeArray","spritesArray","startPos","startColVal","startRowVal","useState","greenRowPosition","setGreenRowPosition","greenColPosition","setGreenColPosition","numberOfMoves","setNumberOfMoves","mazeBoardFocus","useRef","useEffect","current","focus","DIRECTIONS","38","39","40","37","role","tabIndex","onKeyDown","e","keyCode","length","curr","row","col","currValue","moves","ref","map","arry","rIdx","sq","cIdx","ind","some","el","idx","b","a","every","v","i","splice","App","width","height","state","setState","showMazeBoard","setShowMazeBoard","inputChangeHanlder","target","name","value","rows","Number","cols","getRandomInt","min","max","Math","floor","random","type","placeholder","onChange","onClick","Array","fill","round","forEach","arr","createSpritesArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6df87d4d.chunk.js","sourcesContent":["export const Saviour = () => {\n    return <div className=\"save\"></div>;\n  };\n  \n  export const Sprites = () => {\n    return <div className=\"sprites\"></div>;\n  };\n  ","import React from \"react\";\nimport { Saviour, Sprites } from \"./saviour\";\nimport \"../App.css\";\n\nconst SquareBox = ({ showGreen, showRed }) => {\n  let liveSprite = showRed;\n  // if (showGreen && showRed) {\n  //   console.log(showGreen, showRed);\n\n  //   liveSprite = !liveSprite;\n  // }\n\n  return showGreen ? (\n    <button className=\"square-box\">\n      <Saviour />\n    </button>\n  ) : showRed && liveSprite ? (\n    <button className=\"square-box\">\n      <Sprites />\n    </button>\n  ) : (\n    <button className=\"square-box\"></button>\n  );\n};\n\nexport default SquareBox;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport SquareBox from \"./square\";\n\nconst MazeBoard = (props) => {\n  const { mazeArray, spritesArray, startPos: { startColVal, startRowVal } = {} } = props;\n  const [greenRowPosition, setGreenRowPosition] = useState(startRowVal);\n  const [greenColPosition, setGreenColPosition] = useState(startColVal);\n  const [numberOfMoves, setNumberOfMoves] = useState(0);\n\n  \n\n  const mazeBoardFocus = useRef();\n  useEffect(() => {\n    mazeBoardFocus.current.focus();\n  }, []);\n\n\n  const DIRECTIONS = {\n    38: [-1, 0],\n    39: [0, 1],\n    40: [1, 0],\n    37: [0, -1]\n  };\n  const moves = ({ keyCode }) => {\n    if (spritesArray.length === 0) return \n    setNumberOfMoves((curr) => (curr += 1));\n\n    if (keyCode >= 37 && keyCode <= 40) {\n      const { 0: row, 1: col } = DIRECTIONS[keyCode];\n      setGreenRowPosition((currValue) =>\n        currValue + row >= 0 && currValue + row < mazeArray.length\n          ? (currValue += row)\n          : currValue\n      );\n      setGreenColPosition((currValue) =>\n        currValue + col >= 0 && currValue + col < mazeArray[0].length\n          ? (currValue += col)\n          : currValue\n      );\n    }\n  };\n\n\n  const isEqual = (a, b) =>\n    a.length === b.length && a.every((v, i) => v === b[i]);\n\n  return (\n    <div\n      className=\"main\"\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={(e) => moves(e)}\n      ref={mazeBoardFocus}\n    >\n      <div className=\"game-live\">\n        <div>{`You have made ${numberOfMoves} move/s`}</div>\n        {spritesArray.length !== 0 ? (\n          mazeArray.map((arry, rIdx) => {\n            return (\n              <div key={rIdx}>\n                {arry.map((sq, cIdx) => {\n                  const showGreen =\n                    greenRowPosition === rIdx && greenColPosition === cIdx;\n                  let ind;\n                  const showRed = spritesArray.some((el, idx) => {\n                    ind = idx;\n                    return isEqual(el, [rIdx, cIdx]);\n                  });\n\n                  if (showGreen && showRed) {\n                    spritesArray.splice(ind, 1);\n                  }\n\n                  return (\n                    <SquareBox\n                      key={rIdx + cIdx}\n                      showGreen={showGreen}\n                      showRed={showRed}\n                    />\n                  );\n                })}\n              </div>\n            );\n          })\n        ) : (\n          <div>{`Congratulation ðŸŽ‰ðŸŽ‰!! You have completed the game in ${numberOfMoves} moves.`}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MazeBoard;\n","import React, { useState } from \"react\";\nimport MazeBoard from \"./Components/mazeBoard\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [state, setState] = useState({\n    width: \"\",\n    height: \"\",\n  });\n\n  const [showMazeBoard, setShowMazeBoard] = useState(false);\n\n  const createMazeBoard = () => {\n    setShowMazeBoard(!showMazeBoard);\n  };\n\n  const inputChangeHanlder = (e) => {\n    setState({\n      ...state,\n      [e.target.name]: [e.target.value],\n    });\n  };\n\n  const { height, width } = state;\n  const rows = Number(height);\n  const cols = Number(width);\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  const startRowVal = getRandomInt(0, rows - 1);\n  const startColVal = getRandomInt(0, cols - 1);\n\n  function createSpritesArray() {\n    const spritesArray = new Array(Math.round((rows * cols) / 10))\n    .fill(1);\n    spritesArray.forEach((el, idx, arr) => arr[idx] = [getRandomInt(0, rows - 1), getRandomInt(0, cols - 1)]);\n\n    return spritesArray;\n  }\n\n  const mazeArray = () => new Array(rows).fill(new Array(cols).fill(1));\n\n  return (\n    <div>\n      <input\n        name=\"height\"\n        type=\"number\"\n        min={1}\n        value={state.height}\n        placeholder=\"height\"\n        onChange={inputChangeHanlder}\n      />\n      <input\n        name=\"width\"\n        type=\"number\"\n        min={1}\n        value={state.width}\n        placeholder=\"width\"\n        onChange={inputChangeHanlder}\n      />\n\n      <button onClick={createMazeBoard}>Create</button>\n\n      {showMazeBoard && (\n        <MazeBoard\n          mazeArray={mazeArray()}\n          spritesArray={createSpritesArray()}\n          startPos={{ startRowVal, startColVal }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}